/*
 * generated by Xtext 2.25.0
 */
package org.healthydrone.dsl.expressions.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.healthydrone.dsl.expressions.expressions.RulesModel
import java.io.File

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class ExpressionsGenerator extends AbstractGenerator {

override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
	val rule = resource.allContents.filter(RulesModel).next
		new File("rules").mkdirs()
		generateMathFile(rule, "rules", fsa)
	}
		
	def generateMathFile(RulesModel rules, String pkgName, IFileSystemAccess2 fsa) {
		fsa.generateFile(pkgName + "/app.py", rules.generatePythonClass(pkgName))
	}
	
	def generatePythonClass (RulesModel rules, String pkgName) '''
	from neo4j import GraphDatabase
	from confluent_kafka import Consumer
	import paho.mqtt.client as mqtt 
	import os
	import json
	
	uri = "neo4j://localhost:7687"
	driver = GraphDatabase.driver(uri, auth=(os.getenv('NEO4J_USER', 'neo4j'), os.getenv('NEO4J_PASSWORD', '2cool4school')))
	session = driver.session()
	def on_connect(client, userdata, flags, rc):
	    print(f"Connected with result code {rc}")
	client = mqtt.Client("rules_engine")
	client.on_connect = on_connect
	client.connect("localhost", 1883, 60)
	client.loop_forever()
	
	consumer = Consumer({
		'group.id': 'foo',
	    'bootstrap.servers': 'localhost',
	    'auto.offset.reset': 'latest'
	})
	consumer.subscribe(['temperature'])
	
	«FOR r : rules.rules»
		«r.name» = «r.value»
	«ENDFOR»
	
	with driver.session() as session:
		session.run(("CREATE (rule:Rule {nameSpace: '«rules.name»', "
			"min: "+ str(minTemperature) +", "
			"max: "+ str(maxTemperature) + "})"
		))
	
	while True:
		msg = consumer.poll(1.0)
	
		if msg is None:
			continue
		if msg.error():
			print("Consumer error: {}".format(msg.error()))
			continue
		
		try:
			print('Received message: {}'.format(msg.value().decode('utf-8')))
			event = json.loads(msg.value().decode('utf-8'))
			if minTemperature > event["value"]:
				«FOR rule : rules.rules»
				«IF rule.name == "minTemperature"»
				«FOR action : rule.actions»
				client.publish("rules/alert", "«action.name»: «action.value.toString()»")
				«ENDFOR»
				«ENDIF»
				«ENDFOR»
				print("Too cold! - publish to mqtt")
			elif maxTemperature < event["value"]:
				«FOR rule : rules.rules»
				«IF rule.name == "maxTemperature"»
				«FOR action : rule.actions»
				client.publish("rules/alert", "«action.name»: «action.value.toString()»")
				«ENDFOR»
				«ENDIF»
				«ENDFOR»
				print("Too hot! - publish to mqtt")
			else:
				print("No rule broken move along - publish to mqtt")
				client.publish("rules/alert", "")
		except Exception as err:
			print(err)
			continue
	
	c.close()

	'''
}

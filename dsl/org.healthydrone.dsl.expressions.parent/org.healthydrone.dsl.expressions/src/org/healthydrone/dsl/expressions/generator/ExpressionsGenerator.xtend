/*
 * generated by Xtext 2.25.0
 */
package org.healthydrone.dsl.expressions.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.healthydrone.dsl.expressions.expressions.RulesModel
import java.io.File

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class ExpressionsGenerator extends AbstractGenerator {

override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
	val rule = resource.allContents.filter(RulesModel).next
		new File("rules").mkdirs()
		generateMathFile(rule, "rules", fsa)
	}
		
	def generateMathFile(RulesModel rules, String pkgName, IFileSystemAccess2 fsa) {
		fsa.generateFile(pkgName + "/" + rules.name + ".py", rules.generatePythonClass(pkgName))
	}
	
	def generatePythonClass (RulesModel rules, String pkgName) '''
	from neo4j import GraphDatabase
	
	uri = "neo4j://localhost:7687"
	driver = GraphDatabase.driver(uri, auth=("neo4j", "password"))

	while True:
		
		«FOR r : rules.rules»
		«IF r.name == 'minTemperature'» 
		if «r.name» < «r.value»:
			print("Too cold!")
		«ENDIF»
		«IF r.name == 'maxTemperature'» 
		if «r.name» > «r.value»:
			print("Too hot!")
		«ENDIF»
			
		«ENDFOR»
		
		time.sleep(5)

	'''
}

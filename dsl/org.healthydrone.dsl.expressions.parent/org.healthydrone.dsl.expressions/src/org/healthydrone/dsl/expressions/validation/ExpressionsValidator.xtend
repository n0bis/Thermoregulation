/*
 * generated by Xtext 2.26.0.RC1
 */
package org.healthydrone.dsl.expressions.validation

import org.eclipse.xtext.validation.Check
import org.healthydrone.dsl.expressions.expressions.RulesModel
import org.healthydrone.dsl.expressions.expressions.Rule
import org.healthydrone.dsl.expressions.expressions.ExpressionsPackage
import org.healthydrone.dsl.expressions.expressions.Color

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class ExpressionsValidator extends AbstractExpressionsValidator {
	
//	public static val INVALID_NAME = 'invalidName'
//
//	@Check
//	def checkGreetingStartsWithCapital(Greeting greeting) {
//		if (!Character.isUpperCase(greeting.name.charAt(0))) {
//			warning('Name should start with a capital', 
//					ExpressionsPackage.Literals.GREETING__NAME,
//					INVALID_NAME)
//		}
//	}

	public static final String VAR_UNIQUE = 'var_unique'
	@Check
	def checkVariablesExist(Rule rule) {
		if ((rule.eContainer as RulesModel).rules.filter[name == rule.name].size > 1) 
			error("Duplicate variables", ExpressionsPackage.eINSTANCE.rule_Name, VAR_UNIQUE)
	}
	
	public static final String MIN_HIGHER_MAX = 'min_higher_max'
	
	@Check
	def checkMinHigherThanMax(Rule rule) {
		//
		val min = (rule.eContainer as RulesModel).rules.filter[name == "minTemperature"]
		val max = (rule.eContainer as RulesModel).rules.filter[name == "maxTemperature"]
		
		try {
			if (min.get(0).value > max.get(0).value) {
				error("Min value is higher than max", ExpressionsPackage.eINSTANCE.rule_Name, MIN_HIGHER_MAX)
			}
		} catch (Exception e) {
			
		}

	}
	
	public static final String IS_COLOR = 'is_color'
	@Check
	def checkIsColor(Rule rule) {
		var isTrue = false
		//error("Min value is higher than max", ExpressionsPackage.eINSTANCE.rule_Name, MIN_HIGHER_MAX)
		for (r : ((rule.eContainer as RulesModel).rules.filter[name == rule.name])) {
			for (a : r.actions) {
				if (a.name == "LEDblink") { //&& !Color.values().contains(a.value)
					isTrue = false
					for (c : Color.values()) {
						if (c.toString == a.value.toString()) {
							isTrue = true
						}
					}
					if (isTrue == false) {
						error("LEDblink should contain a color", ExpressionsPackage.eINSTANCE.rule_Name, IS_COLOR)
					}
				}
			}
		}
		 
	}
}

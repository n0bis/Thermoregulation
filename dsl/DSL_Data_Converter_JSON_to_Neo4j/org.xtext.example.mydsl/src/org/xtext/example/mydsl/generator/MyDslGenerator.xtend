/*
 * generated by Xtext 2.26.0.RC1
 */
package org.xtext.example.mydsl.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.xtext.example.mydsl.myDsl.Model
import java.io.File

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class MyDslGenerator extends AbstractGenerator {
	
	int numbers
	
	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		val rule = resource.allContents.filter(Model).next
		val number = 4
		new File("rules").mkdirs()
		generateMathFile(rule, "rules", fsa, number)
	}
		
	def generateMathFile(Model rules, String pkgName, IFileSystemAccess2 fsa, int number) {
		numbers = 4
		
		fsa.generateFile(pkgName + "/app.txt", rules.generatePythonClass(pkgName, number))
	}
	
	def generatePythonClass (Model rules, String pkgName, int number) '''
		
		«FOR data : rules.datas»
		CREATE (temperature«numbers+=1»:Temperature {value: «data.value», tracked_at: «data.tracked»})
		«ENDFOR»
		«numbers = 4»
		CREATE
		«FOR data : rules.datas»
		(temperature«numbers+=1»)-[:TRACKED_BY]->(truck),
		«ENDFOR»
		
	'''
}

